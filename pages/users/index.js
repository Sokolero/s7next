import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { setUsers, createUser, setFilter } from "../redux/actions";
import Head from 'next/head'
import Image from 'next/image'
import Link from 'next/link';
import { useRouter } from "next/router";
import ActiveLink from "../components/ActiveLink";
import Header from "../components/Header";
import Footer from "../components/Footer";
import { v4 as uuidv4 } from "uuid";
import User from "../components/User";
import styles from '../../styles/Users.module.css';
import * as axios from "axios";
import { useForm } from "react-hook-form";
import * as _ from "lodash";

const sortByFilter = (filterType, collection) => {
  switch (filterType) {
    case "first_name":
      return _.sortBy(collection, "first_name")
    case "last_name":
      return _.sortBy(collection, "last_name")
    case "email":
      return _.sortBy(collection, "email")
    default:
      return collection;
  }
}


export default function Users({ users }) {
  const { register, handleSubmit, watch, reset, clearErrors, formState: { errors } } = useForm();
  const dispatch = useDispatch();
  const usersFromStore = useSelector((state) => state.users);
  const [formVisibility, setVisibility] = useState(false);
  const currFilter = useSelector((state) => state.filter);
  const filteredUsers = sortByFilter(currFilter, usersFromStore);

  useEffect(() => {
    if (!usersFromStore) {
      dispatch(setUsers(users));
    }
  }, []);

  const changeVisibility = () => {
    setVisibility(!formVisibility);
  }

  const onSubmit = (data) => {
    try {
      dispatch(createUser(data, usersFromStore[usersFromStore.length - 1].id));
      changeVisibility();
      reset({
        firstName: "",
        lastName: "",
        email: "",
      });

    } catch(error) {
      console.log(error.message)
    }
  }

  const changeFilter = (e) => {
    const filterType = e.target.dataset.filter;
    dispatch(setFilter(filterType));
  }

  const formWrapperClass = formVisibility
    ? styles.form__wrapper
    : styles.form__wrapper_hidden;

  const getFilterCN = (filterType, currFilter) => {
      return filterType === currFilter ? styles.filter_active : styles.filter
  }

  return (
    <div className={styles.App}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      <main className={styles.main}>
        {
          !formVisibility
          ? <button onClick={changeVisibility} className={styles.btn__add}>Add user</button>
          : null
        }
        <h1 className={styles.h1}>Users</h1>
        <div className={styles.filters__text}>
          <span className={styles.filter}>Sorted by: </span>
          <button onClick={changeFilter} data-filter="without" className={getFilterCN("without", currFilter)}>Without</button>
          <button onClick={changeFilter} data-filter="email" className={getFilterCN("email", currFilter)}>By email</button>
          <button onClick={changeFilter} data-filter="first_name" className={getFilterCN("first_name", currFilter)}>By first name</button>
          <button onClick={changeFilter} data-filter="last_name" className={getFilterCN("last_name", currFilter)}>By last name</button>
        </div>
        <ul className="users__list">
          {filteredUsers.map((user) => (
            <User user={user} key={uuidv4()} dispatch={dispatch} />
          ))}
        </ul>
      </main>
      <Footer />
      <div className={formWrapperClass}>
        <div className={styles.form__backwall} onClick={changeVisibility}></div>
        <form onSubmit={handleSubmit(onSubmit)} className={styles.form} action="">
          <input className={styles.input} {...register("firstName", { required: true })}  type="text" name="firstName" placeholder="Write your first name.."/>
          <small className={styles.error}>
            {errors.firstName?.type === "required" && "First name is required"}
          </small>
          <input className={styles.input} {...register("lastName", { required: true })} type="text" name="lastName" placeholder="Write your last name.."/>
          <small className={styles.error}>
            {errors.lastName?.type === "required" && "Last name is required"}
          </small>
          <input className={styles.input} {...register("email", { required: true })} type="email" name="email" placeholder="Email"/>
          <small className={styles.error}>
            {errors.email?.type === "required" && "Email is required"}
          </small>
          <button className={styles.submit} type="submit">Create user</button>
          <button onClick={() => clearErrors(["firstName", "lastName", "email"])} className={styles.reset} type="reset">Reset</button>
        </form>
      </div>
    </div>
  )
}

export async function getStaticProps() {
  const res = await axios.get("https://reqres.in/api/users/");
  const users = await res.data.data;

  return { props: { users } }
}
